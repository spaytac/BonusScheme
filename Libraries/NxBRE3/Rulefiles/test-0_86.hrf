/*  Generated by org.nxbre.ie.adapters.HRF086Adapter  */
#DIRECTION_FORWARD

[NxBRE HRF Test File];

/* Queries */
[Safe Room List]
( Room In Zone{?Room Number, ?Zone Number}
& ( Firemen In Room{?Room Number}
| ( ! Fire Alarm In Room{?Room Number}
& ! Alarm Fault In Room{?Event Type, ?Room Number} ) ) );

[Query A and B]
( flag{?object, andTestB}
& flag{?object, andTestA} );

[Query A and B and C]
( flag{?otherObject, andTestC}
& flag{?object, andTestB}
& flag{?object, andTestA} );

[Query A]
flag{?object, triggerQueryA};

[Query B]
flag{?object, triggerQueryB};

[Operator e]
probe{?object, NxBRE:Equals(100)};

[Operator gt]
probe{?object, NxBRE:GreaterThan(100)};

[Operator gte]
probe{?object, NxBRE:GreaterThanEqualTo(100)};

[Operator lt]
probe{?object, NxBRE:LessThan(100)};

[Operator lte]
probe{?object, NxBRE:LessThanEqualTo(100)};

[Operator ne]
probe{?object, NxBRE:NotEquals(100)};

[One Atom Var-less]
varless.value{NxBRE:GreaterThan(C)};

[Two Atoms Var-less]
( varless.value{NxBRE:GreaterThan(C)}
& varless.value{NxBRE:GreaterThanEqualTo(A)} );

[Two Atoms]
( varless.value{NxBRE:GreaterThan(C)}
& varless.value{?Whatever} );

/* Implications */
[Test A and B or C]
( id{?account, NxBRE:LessThan(500)}
& ( balance{?account, NxBRE:GreaterThanEqualTo(100)}
| balance{?account, NxBRE:LessThanEqualTo(50)} ) )
-> testAandBorC{?account};

[Test B or C and A]
( id{?account, NxBRE:LessThan(500)}
& ( balance{?account, NxBRE:LessThanEqualTo(50)}
| balance{?account, NxBRE:GreaterThanEqualTo(100)} ) )
-> testCorBandA{?account};

[label:Test A or D and E and B or C;priority:95;]
( testCorBandA{?account}
& ( balance{?account, NxBRE:GreaterThanEqualTo(1000)}
| balance{?account, NxBRE:LessThanEqualTo(50)} )
& ( testAandBorC{?account}
| id{?account, NxBRE:LessThan(5)} ) )
-> testAorDandEandBorC{?account};

[label:Test A and F or G or A and G;priority:100;]
( balance{?account, NxBRE:GreaterThan(100)}
| ( balance{?account, NxBRE:GreaterThan(100)}
& id{?account, NxBRE:LessThan(500)} )
| ( testAorDandEandBorC{?account}
& id{?account, NxBRE:LessThan(500)} ) )
-> testAandForGorAandG{?account};

[Test A and B]
( flag{?object, andTestB}
& flag{?object, andTestA} )
-> testAandB{?object};

[Test B and C]
( flag{?object, andTestC}
& flag{?object, andTestB} )
-> testBandC{?object};

[Test Strict Imp]
( flagStrictB{?valueA, ?valueB}
| flagStrictA{?valueA} )
-> testStrict{?valueA, ?valueB};

[Test B or C]
( flag{?object, andTestC}
| flag{?object, andTestB} )
-> testBorC{?object};

[Medium]
flag{?object, testPriority}
-> mediumImpl{?object};

[label:Lower;priority:20;]
flag{?object, testPriority}
-> lowerImpl{?object};

[label:Higher;priority:80;]
flag{?object, testPriority}
-> higherImpl{?object};

[label:Mutex Trigger;priority:100;]
flag{?object, mutexLock}
-> mutexLocked{?object};

[label:Rule A;mutex:Mutex Trigger;]
flag{?object, triggeredA}
-> mutexA{?object};

[label:Rule B;mutex:Mutex Trigger;]
flag{?object, triggeredB}
-> mutexB{?object};

[label:Rule C;priority:75;mutex:Rule A;]
flag{?object, triggeredC}
-> mutexC{?object};

[Precondition Trigger]
flag{?object, preconditionTrigger}
-> preconditionTriggered{?object};

[label:Rule X;precondition:Rule Z;]
flag{?object, triggeredX}
-> preconditionX{?object};

[label:Rule Y;priority:25;precondition:Precondition Trigger;]
flag{?object, triggeredY}
-> preconditionY{?object};

[label:Rule Z;precondition:Precondition Trigger;]
flag{?object, triggeredZ}
-> preconditionZ{?object};

[Query C and A and B]
( flag{?object, triggerQueryB}
& flag{?object, triggerQueryA}
& flag{?object, triggerQueryC} )
-> queryRef{?object};

( balance{?account, actualValue, ?amount}
& balance{?account, expectedValue, ?amount} )
-> isValid{?account};

balance{?account, actualValue, 25}
-> isTwentyFive{?account};

[label:No Action Implication;action:none;]
noopTrigger{foo}
-> doNotAssert{bar};

[label:No Action Implication Checker;precondition:No Action Implication;]
noopTrigger{foo}
-> noopPreconditioned{OK};

[label:Retracting Implication;action:retract;]
retractionTrigger{?target}
-> toRetract{?target};

[label:Retracting Implication Checker;precondition:Retracting Implication;]
retractionTrigger{?target}
-> retractionConfirmation{?target};

[One Atom Var-less]
varless.value{NxBRE:GreaterThan(C)}
-> first.deduction{correct};

[Incorrect One Atom Var-less]
varless.value{NxBRE:GreaterThan(Z)}
-> second.deduction{incorrect};

[Two Atoms Var-less]
( varless.value{NxBRE:GreaterThan(C)}
& varless.value{?Whatever} )
-> third.deduction{correct};

[Two Atoms]
( varless.value{NxBRE:GreaterThan(C)}
& varless.value{?Whatever} )
-> forth.deduction{correct};

[Atom Combination Bug 1346078]
( trigger-atom-combination{?stringA, bar}
& trigger-atom-combination{?stringB, bar} )
-> result{?stringA, ?stringB};

[Test Atom Function Relation]
( Result Count{?Value, Passed}
& Minimum Passed{?Threshold}
& NxBRE:GreaterThanEqualTo{?Value, ?Threshold} )
-> Success{?Value, Failed};

[Test Or Naf Combination]
( CheckProductInfo{true}
& ( ! regular{?product}
| ! luxury{?product} ) )
-> NotAllCategoriesCovered{true};

[label:Modifying Implication;action:modify;]
( modifyTrigger{?trigger, ?target}
& modifyTarget{?target, before} )
-> modifyTarget{?target, after};

[Naf match atom problem bug 1332214]
( naf-switch{?index, pivot, ?value}
& naf-probe{?index, ?content}
& ! naf-switch{?index, pivot, foo} )
-> naf-matched{?index, ?value, success};

/* Facts */
[Porsche Luxury]
+luxury{Porsche};

+spending{Peter Miller, min 5000 euro, previous year};

[Honda Regular]
+regular{Honda};

